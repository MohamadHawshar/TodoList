{"version":3,"sources":["components/Header.js","components/TodoItem.js","components/Todo.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Header","style","headerStyle","borderBottom","display","to","className","Component","color","backgroundColor","padding","textAlign","TodoItem","todoItemStyle","textDecoration","props","todo","completed","changeComplete","handleItemCheck","id","handleDelete","this","type","checked","onChange","title","deleteButton","onClick","border","borderRadius","cursor","float","Todo","handleSubmit","e","preventDefault","handleChange","target","value","todos","map","key","onSubmit","flex","seachBar","About","App","setState","state","sc","searchBar","Axios","post","then","res","data","delete","filter","exact","path","render","get","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.066c3dd8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div style={headerStyle}>\r\n               <h1 ><div style={{borderBottom :'2px solid white',display: 'inline-block'}}>Todo App</div></h1>\r\n               <div>\r\n               <span><Link to=\"/\" className=\"link\">Home</Link></span>\r\n               <span><Link to='/about'  className=\"link\">About</Link></span>\r\n               </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst headerStyle = {\r\n    color: \"white\",\r\n    backgroundColor: \"#333\",\r\n    padding:'10px',\r\n    textAlign: 'center'\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n\r\n    todoItemStyle =()=> {return({\r\n        backgroundColor:'#f3f3f3',\r\n        padding:'10px',\r\n        borderBottom:'1px dotted black',\r\n        textDecoration: this.props.todo.completed? 'line-through':'none' \r\n    })}\r\n    \r\n\r\n    changeComplete = ()=>{\r\n       return  this.props.handleItemCheck(this.props.todo.id);\r\n    }\r\n    handleDelete = () => {\r\n        return this.props.handleDelete(this.props.todo.id);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={this.todoItemStyle()}>\r\n                    <input type=\"checkbox\" checked={this.props.todo.completed} onChange={this.changeComplete}/>\r\n                    {this.props.todo.title}\r\n                    <button style={deleteButton} onClick={this.handleDelete}>X</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst deleteButton = {\r\n    backgroundColor:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    padding:'5px 9px',\r\n    borderRadius:'50%',\r\n    cursor:'pointer',\r\n    float:'right'\r\n\r\n}","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport default class Todo extends Component {\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        return this.props.handleSubmit();\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        return this.props.handleChange(e.target.value);\r\n\r\n    }\r\n    render() {\r\n        const todos = this.props.todos.map((todo)=>{\r\n           return <TodoItem key={todo.id} todo={todo} handleItemCheck={this.props.handleItemCheck} handleDelete={this.props.handleDelete}/>\r\n        });\r\n        return (\r\n            <div>\r\n                <form style={{display:'flex',padding:'4px'}} onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" style={{flex:'7'}}value={this.props.seachBar} onChange={this.handleChange}/>\r\n                    <input type=\"submit\"style={{flex:'1'}} />\r\n                </form>\r\n                {todos}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            This is the about page\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router,Route} from 'react-router-dom';\nimport Header from './components/Header';\nimport Todo from './components/Todo';\nimport uuid from 'react-uuid';\nimport About from './components/About';\nimport Axios from 'axios';\n\n\nexport default class App extends Component {\n  constructor(props)\n{\n  super(props);\n  this.state = {\n    todos:[],\n  searchBar:\"\"\n  };\n}\nhandleItemCheck = (id) => {\n  this.setState(this.state.todos.map((todo) => {\n    if(todo.id === id)\n    todo.completed = !todo.completed;\n    return todo;\n  }))\n}\nhandleChange = (sc) => {\n  this.setState({searchBar:sc})\n}\nhandleSubmit = () => {\n  Axios.post('https://jsonplaceholder.typicode.com/todos',{\n    title:this.state.searchBar,\n    completed: false\n  }).then(res => {this.setState({todos:[...this.state.todos,res.data]})\n})}\n\nhandleDelete = (id) => {\n  Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then(res => this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]}) )\n  \n}\n render(){\n  return (\n    <Router>\n    <div className=\"App\">\n      <Header />\n      <Route exact path='/' render={props =>(\n        <Todo \n          todos={this.state.todos} \n          handleItemCheck={this.handleItemCheck} \n          handleSubmit={this.handleSubmit} \n          handleChange={this.handleChange} \n          handleDelete={this.handleDelete}\n        />)} \n      />\n      <Route path='/about' render={props => (<About />)} />\n\n    </div>\n    </Router>\n  );\n}\ncomponentDidMount(){\n  Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=20')\n  .then(res => {this.setState({todos: res.data})})\n}\n}\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}